@page "/"
@inject HttpClient HttpClient

<h3>Collected Links</h3>
<div class="container mt-3">
    <div class="form-group mb-3">
        <label for="urlInput">Enter URL</label>
        <input type="text" class="form-control" id="urlInput" @bind="inputUrl" placeholder="Enter URL" />
    </div>
    <div class="form-group mb-3">
        <label for="minutesInput">Enter Minutes</label>
        <input type="number" class="form-control" id="minutesInput" @bind="maxMinutes" placeholder="Enter Minutes" />
    </div>
    <div class="form-group mb-3">
        <label for="depthInput">Enter Depth</label>
        <input type="number" class="form-control" id="depthInput" @bind="maxDepth" placeholder="Enter Depth" />
    </div>
    <button class="btn btn-primary" @onclick="FetchAndSaveLinks">Fetch Links</button>
</div>

@if (isFetching)
{
    <div class="alert alert-info mt-3">Fetching links...</div>
}

@if (isFetchComplete)
{
    <div class="alert alert-success mt-3">All links have been fetched successfully!</div>
}

@if (isTimeout)
{
    <div class="alert alert-danger mt-3">Fetching links timed out.</div>
}

<ul class="list-group mt-3">
    @foreach (var link in uniqueLinks)
    {
        <li class="list-group-item">
            <a href="@link" target="_blank">@link</a>
        </li>
    }
</ul>

@code {
    private List<string> uniqueLinks = new(); // List to display unique links
    private string inputUrl = string.Empty;
    private int maxMinutes = 1; // Maximum number of minutes to run the task
    private int maxDepth = 2; // Maximum recursion depth
    private bool isFetching = false;
    private bool isFetchComplete = false;
    private bool isTimeout = false;

    private async Task FetchAndSaveLinks()
    {
        if (string.IsNullOrEmpty(inputUrl))
        {
            return; // Don't proceed if the URL is empty
        }

        isFetching = true;
        isFetchComplete = false;
        isTimeout = false;
        StateHasChanged(); // Update the UI

        try
        {
            var response = await HttpClient.GetAsync($"api/proxy/fetchLinks?url={Uri.EscapeDataString(inputUrl)}&maxDepth={maxDepth}&maxMinutes={maxMinutes}");
            if (response.IsSuccessStatusCode)
            {
                var links = await response.Content.ReadFromJsonAsync<HashSet<string>>();
                uniqueLinks = links.ToList();
                isFetchComplete = true;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.RequestTimeout)
            {
                isTimeout = true;
            }
            else
            {
                Console.WriteLine($"Failed to fetch links: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
        finally
        {
            isFetching = false;
            StateHasChanged(); // Update the UI
        }
    }
}
